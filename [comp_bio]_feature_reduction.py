# -*- coding: utf-8 -*-
"""[Comp Bio] Feature reduction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jimKGIWUUDjrxObJy0bZQPjJPCe5D2Pt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_selection import mutual_info_classif
import os

file_path = '/content/dataset_2.csv'  # actual file path

if not os.path.exists(file_path):
    raise FileNotFoundError(f"The file {file_path} does not exist. Please provide the correct path.")

"""Specify these values depending on the dataset csv structure"""

# dataset specifications
header_not_present = False
drop_missing_rows = True
target_column_is_last = False
target_col = "diagnosis"

# if no header
if header_not_present:
  df = pd.read_csv(file_path, header=None)
  df.columns = [i for i in range(df.shape[1])]
# if header
else:
  df = pd.read_csv(file_path)

print(f"Dataset shape: {df.shape}")
print(f"Number of features: {df.shape[1]-1}")  # assuming one column is target

print(df.columns)

if target_column_is_last:
  target_col = df.columns[-1]

# drop rows with missing values in the target
if drop_missing_rows:
  df_clean = df.dropna()
  X = df_clean.drop(target_col, axis = 1)
  y = df_clean[target_col]
else:
  X = df.drop(target_col, axis = 1)
  y = df[target_col]
  X = X.fillna(X.mean(), inplace=True)

print(f"Dataset shape after dropping/imputing NA rows: {X.shape}")

# handle the symbolic features
symbolic_features = X.select_dtypes(include=['object']).columns
if len(symbolic_features) > 0:
    X = pd.get_dummies(X, columns=symbolic_features, drop_first=True)
    print(f"Shape after encoding categorical features: {X.shape}")

# correlation matrix
correlation_matrix = X.corr().abs()

plt.figure(figsize=(15, 12))
mask = np.triu(np.ones_like(correlation_matrix))
sns.heatmap(correlation_matrix, mask=mask, cmap='coolwarm',
            vmin=0, vmax=1, square=True, linewidths=0.5)
plt.title('Feature Correlation Matrix')
plt.tight_layout()
plt.show()

# Continue with feature selection
feature_importance = mutual_info_classif(X, y, random_state=42)

importance_df = pd.DataFrame({
    'Feature': X.columns,
    'Importance': feature_importance
}).sort_values('Importance', ascending=False)

print("\nTop 10 features by importance:")
print(importance_df.head(10))

# Function to select top uncorrelated features
def select_uncorrelated_features(corr_matrix, importance_df, n_features=2, corr_threshold=0.7):

    selected = [importance_df.iloc[0]['Feature']]

    for _, row in importance_df.iloc[1:].iterrows():
        feature = row['Feature']

        is_correlated = False
        for selected_feature in selected:
            if corr_matrix.loc[feature, selected_feature] > corr_threshold:
                is_correlated = True
                break

        if not is_correlated:
            selected.append(feature)

        if len(selected) >= n_features:
            break

    return selected

top_features = select_uncorrelated_features(correlation_matrix, importance_df)

print(f"\nSelected top 2 uncorrelated features: {top_features}")

print("\nImportance of selected features:")
for feature in top_features:
    importance = importance_df[importance_df['Feature'] == feature]['Importance'].values[0]
    print(f"{feature}: {importance:.6f}")

print("\nCorrelation between selected features:")
print(correlation_matrix.loc[top_features, top_features])

X_selected = X[top_features].copy()
X_selected['target'] = y

plt.figure(figsize=(15, 5))
for i, feature in enumerate(top_features):
    plt.subplot(1, 3, i+1)
    for target_value in sorted(y.unique()):
        sns.kdeplot(
            X_selected[X_selected['target'] == target_value][feature],
            label=f'Class {target_value}'
        )
    plt.title(f'Distribution of {feature}')
    plt.legend()
plt.tight_layout()
plt.show()

sns.pairplot(X_selected, hue='target')
plt.suptitle('Relationships Between Selected Features', y=1.02)
plt.show()

print(f"\nFeature selection complete. Reduced from {X.shape[1]} to {len(top_features)} features.")

selected_data = df[top_features + [target_col]].copy()  # include target column
selected_data.to_csv('selected_features_dataset.csv', index=False)
print("Selected features saved to 'selected_features_dataset.csv'")